#ifndef {{prefix}}_{{classname}}_H
#define {{prefix}}_{{classname}}_H

#include <drogon/drogon.h>
#include <json/json.h>
#include <string>
#include <optional>

{{#imports}}{{{import}}}
{{/imports}}

{{#cppNamespace}}
namespace {{this}} {
{{/cppNamespace}}

{{#models}}
{{#model}}
{{#summary}}
// {{.}}
{{/summary}}
{{#description}}
// {{.}}
{{/description}}
struct {{classname}} {
    {{#vars}}
    {{{dataType}}} {{name}};
    {{/vars}}

    operator Json::Value() const {
        return this->toJson();
    }
    {{classname}}(const Json::Value& __value) {
        this->fromJson(__value);
    }

    Json::Value toJson() const {
        Json::Value _json;
    {{#vars}}
        _json["{{name}}"] = {{#isContainer}}Helper::toJson{{/isContainer}}({{name}}{{#isModel}}.toJson(){{/isModel}});
    {{/vars}}
        return _json;
    }
    {{classname}}& fromJson(const Json::Value& _json) {
        Json::Value _json;
    {{#vars}}
        {{name}} = _json["{{name}}"].as<{{{dataType}}}>();
    {{/vars}}
        return *this;
    }
};
{{/model}}
{{/models}}

{{#cppNamespace}}
}
{{/cppNamespace}}

#endif
