#ifndef {{prefix}}_{{classname}}_H
#define {{prefix}}_{{classname}}_H

#include <drogon/drogon.h>
#include <json/json.h>
#include <string>
#include <optional>
#include "../helper.h"

{{#imports}}{{{import}}}
{{/imports}}

{{#cppNamespace}}
namespace {{this}} {
{{/cppNamespace}}

{{#models}}
{{#model}}
{{#summary}}
// {{.}}
{{/summary}}
{{#description}}
// {{.}}
{{/description}}
{{#isEnum}}
struct {{classname}} {
    enum class Value {
        {{#allowableValues}}
            {{#values}}
        e{{.}},
            {{/values}}
        {{/allowableValues}}
        Unknown,
    } value;
    {{classname}}() { value = Value::Unknown; };
    operator Json::Value() const {
        return this->toJson();
    }
    {{classname}}(const Json::Value& __value) {
        this->fromJson(__value);
    }
    {{classname}}(const Value __value) : value(__value) {}

    Json::Value toJson() const {
        switch(this->value) {
        {{#allowableValues}}
            {{#values}}
        case Value::e{{.}}:
            return Json::Value({{#isString}}"{{/isString}}{{.}}{{#isString}}"{{/isString}});
            {{/values}}
        {{/allowableValues}}
        case Value::Unknown:
            return Json::Value(Json::nullValue);
        }
    }
    {{classname}}& fromJson(const Json::Value& _json) {
        {{#isString}}
        std::string s = _json.asString();
        {{/isString}}
        {{^isString}}
        auto s = _json.asLargestInt();
        {{/isString}}
    {{#allowableValues}}
        {{#values}}
        if (s == {{#isString}}"{{/isString}}{{.}}{{#isString}}"{{/isString}}) {
            this->value = Value::e{{.}};
        } else
        {{/values}}
    {{/allowableValues}}
        {
            this->value = Value::Unknown;
        }
        return (*this);
    }
};
{{/isEnum}}
{{^isEnum}}
struct {{classname}} {
    {{#vars}}
    {{{dataType}}} {{name}};
    {{/vars}}

    {{classname}}() = default;
    operator Json::Value() const {
        return this->toJson();
    }
    {{classname}}(const Json::Value& __value) {
        this->fromJson(__value);
    }

    Json::Value toJson() const {
        Json::Value _json;
    {{#vars}}
        _json["{{name}}"] = {{#isContainer}}Helper::toJson{{/isContainer}}({{name}}{{#isModel}}.toJson(){{/isModel}});
    {{/vars}}
        return _json;
    }
    {{classname}}& fromJson(const Json::Value& _json) {
    {{#vars}}
        {{#isContainer}}
        for (auto _it = _json["{{name}}"].begin(); _it != _json["{{name}}"].end(); _it++) {
            {{name}}.emplace{{#isArray}}_back{{/isArray}}({{#isMap}}_it.name(), {{/isMap}}{{#items}}(*_it){{^isModel}}.as<{{{dataType}}}>(){{/isModel}}{{/items}});    
        }
        {{/isContainer}}
        {{^isContainer}}
            {{#isModel}}
        {{name}}.fromJson(_json["{{name}}"]);
            {{/isModel}}
            {{^isModel}}
        {{name}} = _json["{{name}}"].as<{{{dataType}}}>();
            {{/isModel}}
        {{/isContainer}}
    {{/vars}}
        return *this;
    }
};
{{/isEnum}}
{{/model}}
{{/models}}

{{#cppNamespace}}
}
{{/cppNamespace}}
{{#models}}
{{#model}}
template <> {{#cppNamespace}}{{.}}::{{/cppNamespace}}{{classname}} Json::Value::as<{{#cppNamespace}}{{.}}::{{/cppNamespace}}{{classname}}>() const { return {{#cppNamespace}}{{.}}::{{/cppNamespace}}{{classname}}(*this); }
{{/model}}
{{/models}}

#endif
