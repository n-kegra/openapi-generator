#ifndef {{prefix}}_{{classname}}_H
#define {{prefix}}_{{classname}}_H

#include <drogon/drogon.h>
#include <string>
#include <optional>
#include <{{includeDir}}/Helper.h>

{{#imports}}{{{import}}}
{{/imports}}

{{#cppNamespace}}
namespace {{this}} {
{{/cppNamespace}}

class {{classname}} {
    std::string baseurl_path;
    std::optional<std::string> bearer_token;
    std::optional<std::string> basic_username;
    std::optional<std::string> basic_password;
    std::optional<std::string> apikey;
    drogon::HttpClientPtr client;

public:

    {{classname}}(std::string _baseurl_host, std::string _baseurl_path);
    
    {{classname}}& setBearerToken(std::string _token);
    {{classname}}& setBasicAuth(std::string _username, std::string _password);
    {{classname}}& setApikey(std::string _apikey);

{{#operations}}
    {{#operation}}

    {{#summary}}
    // {{.}}
    {{/summary}}
    {{#description}}
    // {{.}}
    {{/description}}
    {{#returnType}}
        {{#isResponseFile}}
    drogon::HttpResponsePtr
        {{/isResponseFile}}
        {{^isResponseFile}}
            {{#returnContainer}}
    std::vector<{{returnBaseType}}>
            {{/returnContainer}}
            {{^returnContainer}}
    {{returnBaseType}}
            {{/returnContainer}}
        {{/isResponseFile}}
    {{/returnType}}
    {{^returnType}}
    void
    {{/returnType}}
    {{operationId}}(
        {{#allParams}}
        const {{^required}}std::optional<{{/required}}{{{dataType}}}{{^required}}>{{/required}}& _{{paramName}}{{^-last}}, {{/-last}}
        {{/allParams}}
    );
   {{/operation}}
{{/operations}}

};

{{#cppNamespace}}
}
{{/cppNamespace}}

#endif
